# ./docker-compose-localbuild.yml
version: '3.8'

services:
  ##################
  # Frontend Application (Next.js)
  ##################
  frontend:
    build:
      context: ./frontend_app # Context needs to be specific to frontend
      dockerfile: ./docker/Dockerfile.frontend
    container_name: bio_frontend_local # Added _local suffix for clarity
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      # Use host.docker.internal for local development if webapp is also in docker
      # Otherwise, use localhost if webapp runs directly on host
      - NEXT_PUBLIC_API_BASE_URL=https://host.docker.internal:8000 # Assuming backend runs on host mapped port OR use service name if on same network
      - NEXT_PUBLIC_FILEBROWSER_URL=https://localhost:8081 # Assuming filebrowser runs on host mapped port
      - PORT=3000
    # volumes: # Usually not needed for production build, mount only if needed for dev
      # - ./frontend_app:/app
    depends_on:
      - webapp # Optional dependency
    restart: unless-stopped
    networks:
      - app-network
    # user: "nextjs" # Optional, image should handle user

  ##################
  # Web Application (FastAPI Backend)
  ##################
  webapp:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.webapp
    container_name: bio_webapp_local # Added _local suffix
    ports:
      - "${WEBAPP_PORT:-8000}:8000"
    volumes:
      - ./backend:/app/backend # Keep for dev convenience
      - ./main.py:/app/main.py # Keep for dev convenience
      - ./tls:/app/tls
      - results_vol:/app/bioinformatics/results # Container path remains the same
      - data_vol:/app/bioinformatics/data     # Container path remains the same
      - ./docker/settings.json:/app/docker/settings.json:ro # Mount settings read-only
    environment:
      - REDIS_HOST=redis
      - PYTHONUNBUFFERED=1
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network

  ##################
  # RQ Worker
  ##################
  worker:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.worker
    container_name: bio_worker_local # Added _local suffix
    depends_on:
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - data_vol:/data # Internal mapping for worker data access
      - results_vol:/results # Internal mapping for worker results access
      - references_vol:/references # Assuming references are needed by Nextflow
      - nextflow_work_vol:/nf_work # Nextflow work directory
      - ./backend:/app/backend:ro # Mount backend code read-only if tasks.py imports utils/core
    environment:
      - REDIS_HOST=redis
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app # Worker needs to import from backend/app
      - NXF_WORK=/nf_work
    user: "${UID:-1000}:${GID:-1000}"
    restart: unless-stopped
    networks:
      - app-network

  ##################
  # Redis
  ##################
  redis:
    image: redis:7-alpine
    container_name: bio_redis_local # Added _local suffix
    volumes:
      - redis_data_vol:/data
    restart: unless-stopped
    networks:
      - app-network

  ##################
  # File Browser
  ##################
  filebrowser:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.filebrowser
    container_name: bio_filebrowser_local # Added _local suffix
    ports:
      - "${FILEBROWSER_PORT:-8081}:8080"
    volumes:
      # --- Mounts for FileBrowser data and config ---
      - data_vol:/srv/data # Mount data volume to /srv/data
      - results_vol:/srv/results # Mount results volume to /srv/results
      - ./docker/filebrowser.db:/config/filebrowser.db # DB location
      - ./docker/settings.json:/config/settings.json:ro # Settings file (read-only)
      - ./tls/server.crt:/config/server.crt:ro # TLS cert (read-only)
      - ./tls/server.key:/config/server.key:ro # TLS key (read-only)
      # --- ADDED: Mount for custom branding ---
      - ./custom_branding:/branding:ro # Mount local custom_branding to /branding in container (read-only)
    user: "${UID:-1000}:${GID:-1000}" # Run as host user
    restart: unless-stopped
    networks:
      - app-network
    # --- ADDED: Command override to enable branding ---
    command: >
      /usr/local/bin/filebrowser
      --port=8080
      --root=/srv
      --database=/config/filebrowser.db
      --config=/config/settings.json
      --branding.files /branding # Point to the mounted branding directory

##################
# Networks
##################
networks:
  app-network:
    driver: bridge

##################
# Volumes
##################
volumes:
  data_vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/admin01/work/mnt/nas/mikha_temp/data' # Host path for data
  results_vol:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/admin01/work/mnt/nas/mikha_temp/results' # Host path for results
  references_vol: # Define host path for references if used by Nextflow/Sarek
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/path/on/host/to/references' # <-- !!! UPDATE THIS PATH !!!
  nextflow_work_vol: # Define host path for Nextflow work directory persistence
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/path/on/host/for/nf_work' # <-- !!! UPDATE THIS PATH or use Docker volume !!!
  redis_data_vol: # Docker managed volume for Redis persistence
    # No device needed, Docker manages this

