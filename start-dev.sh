#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
REDIS_CONTAINER_NAME="bio_redis_local"
FILEBROWSER_CONTAINER_NAME="bio_filebrowser_local"
FRONTEND_DIR="frontend_app"
FRONTEND_ENV_FILE="$FRONTEND_DIR/.env.local" # Define path for .env.local
REDIS_URL="redis://localhost:6379/0"
QUEUE_NAME="pipeline_tasks"
TLS_DIR="./tls"
TLS_KEY="$TLS_DIR/server.key"
TLS_CERT="$TLS_DIR/server.crt"

# --- Content for .env.local ---
# Use printf for better handling of special characters if needed later
read -r -d '' FRONTEND_ENV_CONTENT << EOM
# File: frontend_app/.env.local (Auto-generated by start_dev.sh if missing)
# Environment variables for LOCAL DEVELOPMENT ONLY. Add to .gitignore!
NEXT_PUBLIC_API_BASE_URL=https://localhost:8000
NEXT_PUBLIC_FILEBROWSER_URL=https://localhost:8081
EOM

# --- Functions ---
log_info() {
  echo "[INFO] $1"
}

log_warn() {
  echo "[WARN] $1" >&2
}

log_error() {
  echo "[ERROR] $1" >&2
  exit 1
}

cleanup() {
  log_info "Cleaning up background processes..."
  pkill -f "python main.py" || true
  pkill -f "rq worker ${QUEUE_NAME}.*${REDIS_URL}" || true
  FRONTEND_DEV_PID=$(ps aux | grep '[n]pm run dev' | grep "${FRONTEND_DIR}" | awk '{print $2}')
  if [ -n "$FRONTEND_DEV_PID" ]; then
    log_info "Attempting to kill frontend (npm run dev) process tree (PID: $FRONTEND_DEV_PID)..."
    pkill -TERM -P "$FRONTEND_DEV_PID" || true
    kill -TERM "$FRONTEND_DEV_PID" || true
    sleep 1
    pkill -KILL -P "$FRONTEND_DEV_PID" || true
    kill -KILL "$FRONTEND_DEV_PID" || true
  fi
  log_info "Cleanup attempt finished."
}

# Trap ^C (Ctrl+C) and run the cleanup function
trap cleanup INT TERM

# --- Main Script ---
log_info "Starting Development Environment..."
PROJECT_ROOT=$(pwd)

# 1. Start Docker Containers
log_info "Attempting to start Redis container ($REDIS_CONTAINER_NAME)..."
docker start "$REDIS_CONTAINER_NAME" || log_warn "Failed to start $REDIS_CONTAINER_NAME. Is it created using 'docker run'? Continuing anyway..."

log_info "Attempting to start FileBrowser container ($FILEBROWSER_CONTAINER_NAME)..."
docker start "$FILEBROWSER_CONTAINER_NAME" || log_warn "Failed to start $FILEBROWSER_CONTAINER_NAME. Is it created using 'docker run'? Continuing anyway..."
sleep 2

# 2. Ensure TLS Certificate and Key exist
log_info "Checking TLS certificate and key..."
if [ -f "$TLS_KEY" ] && [ -f "$TLS_CERT" ]; then
    log_info "TLS key and certificate found in $TLS_DIR."
else
    if [ -e "$TLS_KEY" ] || [ -e "$TLS_CERT" ]; then
        log_warn "'$TLS_KEY' or '$TLS_CERT' exists but is not a regular file (or one is missing). Regenerating..."
    else
         log_warn "TLS key or certificate not found in $TLS_DIR. Generating..."
    fi
    log_info "Attempting to remove existing '$TLS_DIR' directory (if any) using sudo..."
    sudo rm -rf "$TLS_DIR"
    log_info "Creating new '$TLS_DIR' directory..."
    mkdir -p "$TLS_DIR" || log_error "Failed to create '$TLS_DIR' directory."
    log_info "Generating self-signed TLS certificate and key..."
    openssl req -x509 -newkey rsa:4096 \
            -keyout "$TLS_KEY" \
            -out "$TLS_CERT" \
            -sha256 -days 365 -nodes \
            -subj "/CN=localhost" || log_error "Failed to generate TLS certificate/key."
    log_info "TLS certificate and key generated successfully in '$TLS_DIR'."
fi

# 3. Start Backend (in background)
log_info "Starting FastAPI backend (python main.py) in background..."
python main.py &
BACKEND_PID=$!
log_info "Backend PID: $BACKEND_PID"
sleep 2 # Give backend a moment before worker starts

# 4. Start RQ Worker (in background)
log_info "Exporting PYTHONPATH and starting RQ worker ($QUEUE_NAME) in background..."
export PYTHONPATH="$PROJECT_ROOT"
rq worker "$QUEUE_NAME" --url "$REDIS_URL" &
WORKER_PID=$!
log_info "RQ Worker PID: $WORKER_PID"
sleep 1

# 5. Ensure Frontend .env.local exists
log_info "Checking Frontend .env.local file..."
if [ -f "$FRONTEND_ENV_FILE" ]; then
    log_info "'$FRONTEND_ENV_FILE' already exists."
else
    if [ -d "$FRONTEND_DIR" ]; then
        log_warn "'$FRONTEND_ENV_FILE' not found. Creating it..."
        # Use printf to write the content. %s prevents interpretation of backslashes etc.
        printf "%s\n" "$FRONTEND_ENV_CONTENT" > "$FRONTEND_ENV_FILE" || log_error "Failed to create '$FRONTEND_ENV_FILE'."
        log_info "'$FRONTEND_ENV_FILE' created successfully."
    else
        log_warn "Frontend directory '$FRONTEND_DIR' not found. Cannot create '$FRONTEND_ENV_FILE'."
    fi
fi

# 6. Start Frontend (in background)
FRONTEND_NPM_PID="" # Initialize Frontend PID
if [ -d "$FRONTEND_DIR" ]; then
  log_info "Changing directory to $FRONTEND_DIR..."
  cd "$FRONTEND_DIR"
  log_info "Starting Frontend dev server (npm run dev) in background..."
  npm run dev &
  FRONTEND_NPM_PID=$! # Store the PID of the 'npm run dev' command itself
  log_info "Frontend process group leader PID: $FRONTEND_NPM_PID"
  cd "$PROJECT_ROOT" # Go back to project root
else
  log_warn "Frontend directory '$FRONTEND_DIR' not found. Skipping frontend start."
fi

log_info "--------------------------------------"
log_info "Development environment is starting up."
log_info "Backend API should be available at https://localhost:8000 (approx)"
log_info "Frontend should be available at http://localhost:3000 (approx)"
log_info "RQ Worker is listening for jobs."
log_info "FileBrowser should be at https://localhost:8081"
log_info "--------------------------------------"
log_info "Press Ctrl+C to attempt stopping all components started by this script."
log_info "Processes running in background:"
log_info "  - Backend (PID: ${BACKEND_PID:-N/A})"
log_info "  - RQ Worker (PID: ${WORKER_PID:-N/A})"
log_info "  - Frontend (Process Group: ${FRONTEND_NPM_PID:-N/A})" # Log the npm PID
log_info "--------------------------------------"

# Wait indefinitely until Ctrl+C is pressed or a process exits
wait $BACKEND_PID $WORKER_PID $FRONTEND_NPM_PID 2>/dev/null || true

# If we reach here, it means processes exited or were interrupted
log_info "Script finished or interrupted."
